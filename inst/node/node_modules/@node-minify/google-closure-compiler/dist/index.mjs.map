{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/*!\n * node-minify\n * Copyright(c) 2011-2023 Rodolphe Stoclin\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nimport compilerPath from 'google-closure-compiler-java';\nimport { utils } from '@node-minify/utils';\nimport { runCommandLine } from '@node-minify/run';\nimport { MinifierOptions, Options, Dictionary } from '@node-minify/types';\n\n// the allowed flags, taken from https://github.com/google/closure-compiler/wiki/Flags-and-Options\nconst allowedFlags = [\n  'angular_pass',\n  'assume_function_wrapper',\n  'checks_only',\n  'compilation_level',\n  'create_source_map',\n  'define',\n  'env',\n  'externs',\n  'export_local_property_definitions',\n  'generate_exports',\n  'language_in',\n  'language_out',\n  'output_wrapper',\n  'polymer_version',\n  'process_common_js_modules',\n  'rename_prefix_namespace',\n  'rewrite_polyfills',\n  'use_types_for_optimization',\n  'warning_level'\n];\n\n/**\n * Run Google Closure Compiler.\n *\n * @param {Object} settings\n * @param {String} content\n * @param {Function} callback\n */\nconst minifyGCC = ({ settings, content, callback, index }: MinifierOptions) => {\n  const options = applyOptions({}, (settings && settings.options) || {});\n  return runCommandLine({\n    args: gccCommand(options),\n    data: content,\n    settings,\n    callback: (err: unknown, content?: string) => {\n      if (err) {\n        if (callback) {\n          return callback(err);\n        } else {\n          throw err;\n        }\n      }\n      if (settings && !settings.content && settings.output) {\n        utils.writeFile({ file: settings.output, content, index });\n      }\n      if (callback) {\n        return callback(null, content);\n      }\n      return content;\n    }\n  });\n};\n\n/**\n * Adds any valid options passed in the options parameters to the flags parameter and returns the flags object.\n * @param {Object} flags\n * @param {Object} options\n * @returns {Object} flags\n */\nconst applyOptions = (\n  flags: Dictionary<string | boolean | [] | { url: string } | { filename: string } | undefined>,\n  options: Options\n) => {\n  if (!options || Object.keys(options).length === 0) {\n    return flags;\n  }\n  Object.keys(options)\n    .filter(option => allowedFlags.indexOf(option) > -1)\n    .forEach(option => (flags[option] = options[option]));\n  return flags;\n};\n\n/**\n * GCC command line.\n */\n\nconst gccCommand = (\n  options: Dictionary<string | boolean | [] | { url: string } | { filename: string } | undefined>\n) => {\n  return ['-jar', compilerPath].concat(utils.buildArgs(options || {}));\n};\n\n/**\n * Expose `minifyGCC()`.\n */\nminifyGCC.default = minifyGCC;\nexport = minifyGCC;\n"],"mappings":";;;;;;AASA,OAAO,kBAAkB;AACzB,SAAS,aAAa;AACtB,SAAS,sBAAsB;AAX/B;AAAA;AAeA,QAAM,eAAe;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AASA,QAAM,YAAY,CAAC,EAAE,UAAU,SAAS,UAAU,MAAM,MAAuB;AAC7E,YAAM,UAAU,aAAa,CAAC,GAAI,YAAY,SAAS,WAAY,CAAC,CAAC;AACrE,aAAO,eAAe;AAAA,QACpB,MAAM,WAAW,OAAO;AAAA,QACxB,MAAM;AAAA,QACN;AAAA,QACA,UAAU,CAAC,KAAcA,aAAqB;AAC5C,cAAI,KAAK;AACP,gBAAI,UAAU;AACZ,qBAAO,SAAS,GAAG;AAAA,YACrB,OAAO;AACL,oBAAM;AAAA,YACR;AAAA,UACF;AACA,cAAI,YAAY,CAAC,SAAS,WAAW,SAAS,QAAQ;AACpD,kBAAM,UAAU,EAAE,MAAM,SAAS,QAAQ,SAAAA,UAAS,MAAM,CAAC;AAAA,UAC3D;AACA,cAAI,UAAU;AACZ,mBAAO,SAAS,MAAMA,QAAO;AAAA,UAC/B;AACA,iBAAOA;AAAA,QACT;AAAA,MACF,CAAC;AAAA,IACH;AAQA,QAAM,eAAe,CACnB,OACA,YACG;AACH,UAAI,CAAC,WAAW,OAAO,KAAK,OAAO,EAAE,WAAW,GAAG;AACjD,eAAO;AAAA,MACT;AACA,aAAO,KAAK,OAAO,EAChB,OAAO,YAAU,aAAa,QAAQ,MAAM,IAAI,EAAE,EAClD,QAAQ,YAAW,MAAM,MAAM,IAAI,QAAQ,MAAM,CAAE;AACtD,aAAO;AAAA,IACT;AAMA,QAAM,aAAa,CACjB,YACG;AACH,aAAO,CAAC,QAAQ,YAAY,EAAE,OAAO,MAAM,UAAU,WAAW,CAAC,CAAC,CAAC;AAAA,IACrE;AAKA,cAAU,UAAU;AACpB,qBAAS;AAAA;AAAA;","names":["content"]}