"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  runCommandLine: () => runCommandLine
});
module.exports = __toCommonJS(src_exports);
var import_child_process = __toESM(require("child_process"));
var runCommandLine = ({ args, data, settings, callback }) => {
  if (settings && settings.sync) {
    return runSync({ settings, data, args, callback });
  }
  return runAsync({ data, args, callback });
};
var runAsync = ({ data, args, callback }) => {
  let stdout = "";
  let stderr = "";
  const child = import_child_process.default.spawn("java", args, {
    stdio: "pipe"
  });
  child.on("error", console.log.bind(console, "child"));
  child.stdin.on("error", console.log.bind(console, "child.stdin"));
  child.stdout.on("error", console.log.bind(console, "child.stdout"));
  child.stderr.on("error", console.log.bind(console, "child.stderr"));
  child.on("exit", (code) => {
    if (code !== 0) {
      return callback && callback(new Error(stderr));
    }
    return callback && callback(null, stdout);
  });
  child.stdout.on("data", (chunk) => {
    stdout += chunk;
  });
  child.stderr.on("data", (chunk) => {
    stderr += chunk;
  });
  child.stdin.end(data);
};
var runSync = ({ settings, data, args, callback }) => {
  try {
    const child = import_child_process.default.spawnSync("java", args, {
      input: data,
      stdio: "pipe",
      maxBuffer: settings && settings.buffer
    });
    const stdout = child.stdout.toString();
    const stderr = child.stderr.toString();
    const code = child.status;
    if (code !== 0) {
      return callback && callback(new Error(stderr));
    }
    return callback && callback(null, stdout);
  } catch (err) {
    return callback && callback(err);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  runCommandLine
});
/*!
 * node-minify
 * Copyright(c) 2011-2023 Rodolphe Stoclin
 * MIT Licensed
 */
//# sourceMappingURL=index.js.map