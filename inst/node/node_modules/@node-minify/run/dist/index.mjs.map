{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/*!\n * node-minify\n * Copyright(c) 2011-2023 Rodolphe Stoclin\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nimport childProcess from 'child_process';\nimport { MinifierOptions } from '@node-minify/types';\n\n/**\n * Run the command line with spawn.\n *\n * @param {Array} args\n * @param {String} data\n * @param {Object} settings\n * @param {Function} callback\n */\nconst runCommandLine = ({ args, data, settings, callback }: MinifierOptions) => {\n  if (settings && settings.sync) {\n    return runSync({ settings, data, args, callback });\n  }\n\n  return runAsync({ data, args, callback });\n};\n\n/**\n * Exec command as async.\n *\n * @param {String} data\n * @param {Array} args\n * @param {Function} callback\n */\nconst runAsync = ({ data, args, callback }: MinifierOptions) => {\n  let stdout = '';\n  let stderr = '';\n\n  const child = childProcess.spawn('java', args, {\n    stdio: 'pipe'\n  });\n\n  child.on('error', console.log.bind(console, 'child'));\n  child.stdin.on('error', console.log.bind(console, 'child.stdin'));\n  child.stdout.on('error', console.log.bind(console, 'child.stdout'));\n  child.stderr.on('error', console.log.bind(console, 'child.stderr'));\n\n  child.on('exit', code => {\n    if (code !== 0) {\n      return callback && callback(new Error(stderr));\n    }\n\n    return callback && callback(null, stdout);\n  });\n\n  child.stdout.on('data', chunk => {\n    stdout += chunk;\n  });\n  child.stderr.on('data', chunk => {\n    stderr += chunk;\n  });\n\n  child.stdin.end(data);\n};\n\n/**\n * Exec command as sync.\n *\n * @param {Object} settings\n * @param {String} data\n * @param {Array} args\n * @param {Function} callback\n */\nconst runSync = ({ settings, data, args, callback }: MinifierOptions) => {\n  try {\n    const child = childProcess.spawnSync('java', args, {\n      input: data,\n      stdio: 'pipe',\n      maxBuffer: settings && settings.buffer\n    });\n    const stdout = child.stdout.toString();\n    const stderr = child.stderr.toString();\n    const code = child.status;\n\n    if (code !== 0) {\n      return callback && callback(new Error(stderr));\n    }\n\n    return callback && callback(null, stdout);\n  } catch (err: unknown) {\n    return callback && callback(err);\n  }\n};\n\n/**\n * Expose `runCommandLine()`.\n */\nexport { runCommandLine };\n"],"mappings":";AASA,OAAO,kBAAkB;AAWzB,IAAM,iBAAiB,CAAC,EAAE,MAAM,MAAM,UAAU,SAAS,MAAuB;AAC9E,MAAI,YAAY,SAAS,MAAM;AAC7B,WAAO,QAAQ,EAAE,UAAU,MAAM,MAAM,SAAS,CAAC;AAAA,EACnD;AAEA,SAAO,SAAS,EAAE,MAAM,MAAM,SAAS,CAAC;AAC1C;AASA,IAAM,WAAW,CAAC,EAAE,MAAM,MAAM,SAAS,MAAuB;AAC9D,MAAI,SAAS;AACb,MAAI,SAAS;AAEb,QAAM,QAAQ,aAAa,MAAM,QAAQ,MAAM;AAAA,IAC7C,OAAO;AAAA,EACT,CAAC;AAED,QAAM,GAAG,SAAS,QAAQ,IAAI,KAAK,SAAS,OAAO,CAAC;AACpD,QAAM,MAAM,GAAG,SAAS,QAAQ,IAAI,KAAK,SAAS,aAAa,CAAC;AAChE,QAAM,OAAO,GAAG,SAAS,QAAQ,IAAI,KAAK,SAAS,cAAc,CAAC;AAClE,QAAM,OAAO,GAAG,SAAS,QAAQ,IAAI,KAAK,SAAS,cAAc,CAAC;AAElE,QAAM,GAAG,QAAQ,UAAQ;AACvB,QAAI,SAAS,GAAG;AACd,aAAO,YAAY,SAAS,IAAI,MAAM,MAAM,CAAC;AAAA,IAC/C;AAEA,WAAO,YAAY,SAAS,MAAM,MAAM;AAAA,EAC1C,CAAC;AAED,QAAM,OAAO,GAAG,QAAQ,WAAS;AAC/B,cAAU;AAAA,EACZ,CAAC;AACD,QAAM,OAAO,GAAG,QAAQ,WAAS;AAC/B,cAAU;AAAA,EACZ,CAAC;AAED,QAAM,MAAM,IAAI,IAAI;AACtB;AAUA,IAAM,UAAU,CAAC,EAAE,UAAU,MAAM,MAAM,SAAS,MAAuB;AACvE,MAAI;AACF,UAAM,QAAQ,aAAa,UAAU,QAAQ,MAAM;AAAA,MACjD,OAAO;AAAA,MACP,OAAO;AAAA,MACP,WAAW,YAAY,SAAS;AAAA,IAClC,CAAC;AACD,UAAM,SAAS,MAAM,OAAO,SAAS;AACrC,UAAM,SAAS,MAAM,OAAO,SAAS;AACrC,UAAM,OAAO,MAAM;AAEnB,QAAI,SAAS,GAAG;AACd,aAAO,YAAY,SAAS,IAAI,MAAM,MAAM,CAAC;AAAA,IAC/C;AAEA,WAAO,YAAY,SAAS,MAAM,MAAM;AAAA,EAC1C,SAAS,KAAP;AACA,WAAO,YAAY,SAAS,GAAG;AAAA,EACjC;AACF;","names":[]}